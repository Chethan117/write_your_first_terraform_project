The issue you've described with the current table creation process is that it only looks at rule changes made in the previous 7 days and whether they have been through the rule implementation checking process. This means that if the work for a rule is done more than 7 days after the rule was implemented, it would never be added to the table to be checked for correct implementation. Additionally, the rules need to be checked for 2 consecutive days, but the rules check between day 7 and day 2 doesn't apply.

PROC SQL;

CREATE TABLE sample AS
SELECT SOME VARIABLES
FROM TABLE A
LEFT JOIN TABLE C
  ON A.DEF_NAME = C.DEF_NAME
 AND A.EVTDT = C.STDT
 AND C.STDT BETWEEN TODAY() - 14 AND TODAY()
WHERE A.EVT IN ('MODIFY', 'IMPLEMENT')
  AND A.EVTDT BETWEEN TODAY() - 14 AND TODAY()
  AND (C.RPTDT IS NULL OR C.RPTDT BETWEEN A.EVTDT - 2 AND A.EVTDT)
ORDER BY A.EVTDT ASC;

QUIT;


Here's what the changes do:

Expand the date range for the STDT column in the LEFT JOIN clause to include the past 14 days instead of just the past 7 days. This ensures that rule changes made more than 7 days ago but within the past 14 days are also included.
Modify the WHERE clause to check the EVTDT column for the past 14 days instead of just the past 7 days. This ensures that all relevant rule changes are captured, regardless of when they were implemented.
Add a condition to the WHERE clause to check if the RPTDT column is either NULL (indicating the rule has not been checked) or if it falls within the 2-day window after the EVTDT (ensuring the rule has been checked for 2 consecutive days).
These changes should address the issues you've described and ensure that the table includes all relevant rule changes, regardless of when they were implemented or checked.
